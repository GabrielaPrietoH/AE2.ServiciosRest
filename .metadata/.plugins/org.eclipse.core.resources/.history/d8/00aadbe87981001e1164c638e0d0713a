package servicio.rest.controlador;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import servicio.rest.modelo.persistencia.DaoLibro;
import servicio.rest.modelo.entidad.Libro;

@RestController
public class ControladorLibro {

	@Autowired
	private DaoLibro daoLibro;
	
	
	
	@GetMapping(path="/libros/{id}",produces = MediaType.APPLICATION_JSON_VALUE)	
	public ResponseEntity<Libro> getLibro(@PathVariable("id") int id) {
		System.out.println("Buscando persona con id: " + id);
		Libro l = daoLibro.get(id);
		if(l != null) {
			return new ResponseEntity<Libro>(l,HttpStatus.OK);//200 OK
		}else {
			return new ResponseEntity<Libro>(HttpStatus.NOT_FOUND);//404 NOT FOUND
		}
	}
	
	
	
	@PostMapping(path="libros",consumes=MediaType.APPLICATION_JSON_VALUE,
			produces=MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Libro> altaLibro(@RequestBody Libro l) {
		System.out.println("altaPersona: objeto persona: " + l);
		daoLibro.add(l);
		return new ResponseEntity<Libro>(l,HttpStatus.CREATED);//201 CREATED
	}
	
	
	
	@GetMapping(path="libros",produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<List<Libro>> listarLibros(
			@RequestParam(name="nombre",required=false) String titulo) {
		List<Libro> listaLibros = null;
		//Si no me viene el nombre, devolvemos toda la lista
		if(titulo == null) {
			System.out.println("Listando las personas");
			listaLibros = daoLibro.list();			
		}else {
			System.out.println("Listando las personas por nombre: " + titulo);
			listaLibros = daoLibro.listByTitulo(titulo);
		}
		System.out.println(listaLibros);
		return new ResponseEntity<List<Libro>>(listaLibros,HttpStatus.OK);
	}
	
	
	@PutMapping(path="libros/{id}",consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Libro> modificarLibro(
			@PathVariable("id") int id, 
			@RequestBody Libro l) {
		System.out.println("ID a modificar: " + id);
		System.out.println("Datos a modificar: " + l);
		l.setId(id);
		Libro lUpdate = daoLibro.update(l);
		if(lUpdate != null) {
			return new ResponseEntity<Libro>(HttpStatus.OK);//200 OK
		}else {
			return new ResponseEntity<Libro>(HttpStatus.NOT_FOUND);//404 NOT FOUND
		}
	 }
	
	
		@DeleteMapping(path="libros/{id}")
		public ResponseEntity<Libro> borrarLibro(@PathVariable("id") int id) {
			System.out.println("ID a borrar: " + id);
			Libro l = daoLibro.delete(id);
			if(l != null) {
				return new ResponseEntity<Libro>(l,HttpStatus.OK);//200 OK
			}else {
				return new ResponseEntity<Libro>(HttpStatus.NOT_FOUND);//404 NOT FOUND
			}
		}
	}
	
